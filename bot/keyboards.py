from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import database.requests as rq

main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ—Ä—Ç—Ñ–µ–ª—å', callback_data='portfolio')],
    [InlineKeyboardButton(text='–°—Ç—Ä–∞—Ç–µ–≥–∏—è', callback_data='strategy')],
    [InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏', callback_data='positions')]
])

portfolio = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', callback_data='deposit')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
])

deposit = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
])

strategy = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üíº  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è',
                          callback_data='strategy_portfolio')],
    [InlineKeyboardButton(text='üóÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º –∏ —Ç–æ–∫–µ–Ω–∞–º',
                          callback_data='strategy_sectors')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')]
])

strategy_portfolio = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å', callback_data='strategy_liquidity')],
    [InlineKeyboardButton(text='–†–∞–±–æ—á–∏–π –ö–∞–ø–∏—Ç–∞–ª', callback_data='strategy_wcapital')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy')]
])

strategy_portfolio_back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy_portfolio'),
     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start')]
])

add_order = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ–∫—É–ø–∫–∞', callback_data='buy_order'),
     InlineKeyboardButton(text='–ü—Ä–æ–¥–∞–∂–∞', callback_data='sell_order')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_positions')]
])

strategy_sectors_back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy_sectors'),
     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start')]
])

order_error_with_token = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í —Å–µ–∫—Ç–æ—Ä—ã', callback_data='strategy_sectors'),
     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start')]
])

order_cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞', callback_data='back_positions')]
])

order_back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_positions'),
     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start')]
])

async def strategy_sectors(page: int = 0) -> InlineKeyboardMarkup:
    all_strategy_sectors = await rq.get_all_sectors()
    if all_strategy_sectors is None:
        all_strategy_sectors = []
    keyboard = InlineKeyboardBuilder()
    buttons_per_page = 4
    nav_buttons = []
    total_pages = (len(all_strategy_sectors) - 1) // buttons_per_page + 1
    start_index = page * buttons_per_page
    end_index = start_index + buttons_per_page
    sectors_on_page = all_strategy_sectors[start_index:end_index]
    if sectors_on_page:
        for sector in sectors_on_page:
            keyboard.row(InlineKeyboardButton(text=sector.name,
                                              callback_data=f'sector_button_{sector.id}'))
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                                    callback_data=f'sector_page_{page - 1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text='‚û°Ô∏è',
                                                    callback_data=f'sector_page_{page + 1}'))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    keyboard.row(
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ç–æ—Ä', callback_data='add_sector'),
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy')
    )
    return keyboard.as_markup()


async def in_sector(sector_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å % —Å–µ–∫—Ç–æ—Ä–∞',
                                      callback_data=f'sector_change_percentage_{sector_id}'),
                 InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω–∞–º–∏',
                                      callback_data=f'strategy_tokens_{sector_id}'))
    keyboard.row(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ç–æ—Ä',
                                      callback_data=f'sector_delete_button_{sector_id}'))
    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy_sectors'))
    return keyboard.as_markup()


async def sector_delete_confirm(sector_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚úÖ –£–≤–µ—Ä–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä',
                                      callback_data=f'sector_delete_confirm_{sector_id}'))
    keyboard.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞',
                                      callback_data=f'sector_button_{sector_id}'))
    return keyboard.as_markup()


async def sector_change(sector_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'sector_button_{sector_id}'))
    keyboard.add(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data=f'start'))
    return keyboard.as_markup()


async def positions(page: int = 0) -> InlineKeyboardMarkup:
    all_positions = await rq.get_all_positions()
    if all_positions is None:
        all_positions = []
    keyboard = InlineKeyboardBuilder()
    buttons_per_page = 4
    nav_buttons = []
    total_pages = (len(all_positions) - 1) // buttons_per_page + 1
    start_index = page * buttons_per_page
    end_index = start_index + buttons_per_page
    positions_on_page = all_positions[start_index:end_index]
    if positions_on_page:
        for position in positions_on_page:
            keyboard.row(InlineKeyboardButton(text=position.name,
                                              callback_data=f'position_button_{position.id}'))
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                                    callback_data=f'position_page_{page - 1}'))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text='‚û°Ô∏è',
                                                    callback_data=f'position_page_{page + 1}'))
        if nav_buttons:
            keyboard.row(*nav_buttons)
    keyboard.row(InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä', callback_data='add_order'),
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='start')
    )
    return keyboard.as_markup()


async def in_position(position_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text="‚ûï –î–æ–∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data=f"position_buy_order_{position_id}"
        ),
        InlineKeyboardButton(
            text="‚ûñ –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω", callback_data=f"position_sell_order_{position_id}"
        ),
    )
    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='positions'),
                 InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start'))
    return keyboard.as_markup()


async def strategy_tokens(sector_id: int, page: int = 0) -> InlineKeyboardMarkup:
    all_strategy_tokens = await rq.get_all_sector_tokens(sector_id=sector_id)
    if all_strategy_tokens is None:
        all_strategy_tokens = []
    keyboard = InlineKeyboardBuilder()
    buttons_per_page = 4
    nav_buttons = []
    total_pages = (len(all_strategy_tokens) - 1) // buttons_per_page + 1
    start_index = page * buttons_per_page
    end_index = start_index + buttons_per_page
    tokens_on_page = all_strategy_tokens[start_index:end_index]
    for token in tokens_on_page:
        keyboard.row(InlineKeyboardButton(text=token.symbol,
                                          callback_data=f'token_button_{token.id}'))
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text='‚¨ÖÔ∏è',
                                                callback_data=f'token_page_{sector_id}_{page - 1}'))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text='‚û°Ô∏è',
                                                callback_data=f'token_page_{sector_id}_{page + 1}'))
    if nav_buttons:
        keyboard.row(*nav_buttons)
    keyboard.row(
        InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', callback_data=f'add_token_{sector_id}'),
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'sector_button_{sector_id}')
    )
    return keyboard.as_markup()


async def strategy_tokens_back(sector_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'strategy_tokens_{sector_id}'),
     InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='start'))
    return keyboard.as_markup()


async def in_token(token_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å %',
                                      callback_data=f'token_change_percentage_{token_id}'),
                 InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω',
                                      callback_data=f'token_delete_button_{token_id}'))
    keyboard.row(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='strategy_sectors'))
    return keyboard.as_markup()

async def token_delete_confirm(token_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚úÖ –£–≤–µ—Ä–µ–Ω, —É–¥–∞–ª—è–µ–º  —Ç–æ–∫–µ–Ω',
                                      callback_data=f'token_delete_confirm_{token_id}'))
    keyboard.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'token_button_{token_id}'))
    return keyboard.as_markup()

async def to_position_button(position_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∑–∏—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é', 
                                     callback_data=f'position_button_{position_id}'))
    return keyboard.as_markup()
