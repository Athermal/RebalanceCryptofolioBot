from decimal import ROUND_DOWN, Decimal, InvalidOperation
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import bot.keyboards as kb
import database.requests as rq
import bot.states as st

router = Router()

def format_number(value: Decimal) -> Decimal:
    value_str = format(value, 'f')
    if '.' in value_str:
        int_part, frac_part = value_str.split('.', 1)
        frac_part = frac_part.rstrip('0')
        if frac_part:
            formatted_str = f'{int_part}.{frac_part}'
        else:
            formatted_str = int_part
    else:
        formatted_str = value_str
    return Decimal(formatted_str)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    text = (f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b> ! üëã\n\n'
            f'–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞: @Athermal \n\n'
            f'üê• <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:</b>')
    await message.answer(text, reply_markup=kb.main)


@router.callback_query(F.data == 'start')
async def step_back_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    text = (f'–ü—Ä–∏–≤–µ—Ç, <b>{callback.from_user.first_name}</b> ! üëã\n\n'
            f'–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞: @Athermal \n\n'
            f'üê• <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:</b>')
    await callback.message.edit_text(text, reply_markup=kb.main)


@router.callback_query(F.data == 'portfolio')
async def portfolio(callback: CallbackQuery):
    all_sum_usd = await rq.get_all_usd_info()
    usd_in_positions = await rq.get_positions_usd_info()
    usd_in_liquidity = await rq.get_direction_or_info(
        direction_name='–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å',
        field='balance_usd')
    usd_in_tokens = await rq.get_tokens_usd()
    text = (f'<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>\n\n'
            f'üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b> {all_sum_usd}$\n\n'
            f'üìä <b>–ò–∑ –Ω–∏—Ö:</b>\n'
            f'  ‚Ä¢ üíµ <b>–í –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:</b> {usd_in_liquidity}$\n'
            f'  ‚Ä¢ üìà <b>–í –ø–æ–∑–∏—Ü–∏—è—Ö:</b> {usd_in_positions}$\n'
            f'  ‚Ä¢ ü™ô <b>–ù–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å—Ç—å:</b> {usd_in_tokens}$\n')
    await callback.message.edit_text(text, reply_markup=kb.portfolio)


@router.callback_query(F.data == 'deposit')
async def deposit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.Deposit.amount_usd)
    text = 'üíµ –í–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É –≤ $</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å <b>–ø–æ—Ä—Ç—Ñ–µ–ª—å</b>:'
    await callback.message.edit_text(text)

@router.message(st.Deposit.amount_usd)
async def deposit_first(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('$', '').strip())
        if raw_input <= 0:
            text = '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!'
            await message.answer(text)
        else:
            formatted_raw = format_number(raw_input).quantize(
                Decimal('0.01'), rounding=ROUND_DOWN
            )
            await state.update_data(amount_usd=formatted_raw)
        data = await state.get_data()
        await rq.add_deposit(amount_usd=data['amount_usd'
        ''])
        text = f'‚úÖ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ <b>{data['amount_usd']}$</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ <b>–ø–æ—Ä—Ç—Ñ–µ–ª—å</b>!'
        await message.answer(text,
                             reply_markup=kb.deposit)
        await state.clear()
    except InvalidOperation:
        text = '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b> –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö!'
        await message.answer(text)
    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.deposit)

@router.callback_query(F.data == 'strategy')
async def strategy(callback: CallbackQuery):
    text = 'üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ %:</b>'
    await callback.message.edit_text(text,
                                     reply_markup=kb.strategy)


@router.callback_query(F.data == 'strategy_portfolio')
async def strategy_portfolio(callback: CallbackQuery):
    liquidity_percentage = await rq.get_direction_or_info(
        direction_name=st.StrategyLiquidity.direction_name,
        field='percentage') or 0
    wcapital_percentage = await rq.get_direction_or_info(
        direction_name=st.StrategyWorkingCapital.direction_name,
        field='percentage') or 0
    text = (f'<b>üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n'
            f'üîπ{st.StrategyLiquidity.direction_name} - {liquidity_percentage}%\n'
            f'üîπ{st.StrategyWorkingCapital.direction_name} - {wcapital_percentage}%\n\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ %:</b>')
    await callback.message.edit_text(text, reply_markup=kb.strategy_portfolio)


@router.callback_query(F.data == 'strategy_liquidity')
async def strategy_liquidity(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.StrategyLiquidity.percentage)
    text = ('üìä –í–≤–µ–¥–∏—Ç–µ <b>%</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b>.\n\n'
            '<i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–∫—É–ø–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö.</i>')
    await callback.message.edit_text(text)


@router.message(st.StrategyLiquidity.percentage)
async def strategy_liquidity_first(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input == 100:
            text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n'
                    '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 100%</u>, —Ç–µ–±–µ –µ—â–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–±–∏—Ä–∞—Ç—å! üòâ')
            await message.answer(text)
            return
        elif raw_input > 100:
            text = '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.'
            await message.answer(text)
            return
        else:
                await state.update_data(percentage=format_number(raw_input))

        data = await state.get_data()
        await rq.change_percentage_portfolio_direction(
            direction_name=st.StrategyLiquidity.direction_name,
            percentage=data['percentage'])
        text = (f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                f'<b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{data['percentage']}% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è.</b>')
        await message.answer(text, reply_markup=kb.strategy_portfolio_back)
        await state.clear()
    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.strategy_portfolio_back)
    except InvalidOperation:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\n'
                '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>30%</code> –∏–ª–∏ <code>30.53%</code>')
        await message.answer(text)


@router.callback_query(F.data == 'strategy_wcapital')
async def strategy_wcapital(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.StrategyWorkingCapital.percentage)
    text = ('üìä <b>–í–≤–µ–¥–∏—Ç–µ %</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ <b>–†–∞–±–æ—á–∏–π –ö–∞–ø–∏—Ç–∞–ª</b>.\n\n'
            '<i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –∏ –∑–∞–∫—É–ø–∞ –ø–æ–∑–∏—Ü–∏–π.</i>')
    await callback.message.edit_text(text)


@router.message(st.StrategyWorkingCapital.percentage)
async def strategy_wcapital_first(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input == 100:
            text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–†–∞–±–æ—á–∏–π –ö–∞–ø–∏—Ç–∞–ª <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 100%</u>, '
                    '—Ç–µ–±–µ –µ—â–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –æ—Ç–∫—É–ø–∞—Ç—å! üòâ')
            await message.answer(text)
            return
        elif raw_input > 100:
            text = '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–†–∞–±–æ—á–∏–π –ö–∞–ø–∏—Ç–∞–ª <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.'
            await message.answer(text)
            return
        else:
            await state.update_data(percentage=format_number(raw_input))

        data = await state.get_data()
        await rq.change_percentage_portfolio_direction(
            direction_name=st.StrategyWorkingCapital.direction_name,
            percentage=data['percentage'])
        text = (f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                f'<b>–†–∞–±–æ—á–∏–π –ö–∞–ø–∏—Ç–∞–ª</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç '
                f'<b>{data['percentage']}% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è.</b>')
        await message.answer(text, reply_markup=kb.strategy_portfolio_back)
        await state.clear()
    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.strategy_portfolio_back)
    except InvalidOperation:
        await message.answer('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\n'
                             '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>70%</code> –∏–ª–∏ <code>70.53%</code>')


@router.callback_query(F.data == 'strategy_sectors')
async def strategy_sectors(callback: CallbackQuery):
    sectors = await rq.get_all_sectors()
    sector_text=''
    if sectors:
        for sector in sectors:
            sector_text += f'üîπ {sector.name} - {sector.percentage}%\n'
    text = (f'<b>üìä –°–µ–∫—Ç–æ—Ä—ã</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:</b>\n'
            f'{sector_text}\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ %:</b>')
    await callback.message.edit_text(text, reply_markup=await kb.strategy_sectors())


@router.callback_query(F.data == 'add_sector')
async def add_sector(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.Sector.name)
    await callback.message.edit_text('üó≥ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞</b>')


@router.message(st.Sector.name)
async def add_sector_first(message: Message, state: FSMContext):
    await state.update_data(sector=message.text)
    data = await state.get_data()
    await state.set_state(st.Sector.percentage)
    text = f'üìä <b>–í–≤–µ–¥–∏—Ç–µ %</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —Å–µ–∫—Ç–æ—Ä <b>{data['sector']}</b>.'
    await message.answer(text)


@router.message(st.Sector.percentage)
async def add_sector_second(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input > 100:
            await message.answer('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–°–µ–∫—Ç–æ—Ä <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.')
            return
        else:
            await state.update_data(percentage=format_number(raw_input))

        data = await state.get_data()
        await rq.add_sector(sector_name=data['sector'], percentage=data['percentage'])
        text = (f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                f'–°–µ–∫—Ç–æ—Ä <b>{data['sector']}</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{data['percentage']}%'
                f' –æ—Ç –†–∞–±–æ—á–µ–≥–æ –ö–∞–ø–∏—Ç–∞–ª–∞.</b>')
        await message.answer(text, reply_markup=kb.strategy_sectors_back)
        await state.clear()
    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.strategy_sectors_back)
    except InvalidOperation:
        await message.answer('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\n'
                             '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>70%</code> –∏–ª–∏ <code>70.53%</code>')


@router.callback_query(F.data.startswith('sector_page_'))
async def sector_page(callback: CallbackQuery):
    page = int(callback.data.split('_')[2])
    sectors = await rq.get_all_sectors()
    sector_text = ''
    if sectors:
        for sector in sectors:
            sector_text += f'üîπ {sector.name} - {sector.percentage}%\n'
    text = (f'<b>üìä –°–µ–∫—Ç–æ—Ä—ã</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:</b>\n'
            f'{sector_text}\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ %:</b>')
    await callback.message.edit_text(
        text,
        reply_markup=await kb.strategy_sectors(page=page))


@router.callback_query(F.data.startswith('sector_button_'))
async def sector_button(callback: CallbackQuery):
    sector_id = int(callback.data.split('_')[2])
    sector = await rq.get_sector_info(sector_id=sector_id)
    tokens = await rq.get_all_sector_tokens(sector_id=sector_id)
    token_text = ''
    if tokens:
        for token in tokens:
            token_text += f'üîπ {token.symbol} - {token.percentage}%\n'
    text = (f'<b>üìä –°–µ–∫—Ç–æ—Ä "{sector.name}"</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º:</b>\n'
            f'{token_text}'
            f'\n\n–í—ã–¥–µ–ª–µ–Ω–æ –æ—Ç –†–∞–±–æ—á–µ–≥–æ –ö–∞–ø–∏—Ç–∞–ª–∞: <b>{sector.percentage}%</b>')
    await callback.message.edit_text(
        text,
        reply_markup=await kb.in_sector(sector_id))


@router.callback_query(F.data.startswith('sector_delete_button_'))
async def sector_delete_first(callback: CallbackQuery):
    sector_id = int(callback.data.split('_')[3])
    sector = await rq.get_sector_info(sector_id=sector_id)
    text = f'<b>–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ç–æ—Ä {sector.name}?</b>'
    await callback.message.edit_text(text, reply_markup=await kb.sector_delete_confirm(sector_id))


@router.callback_query(F.data.startswith('sector_delete_confirm_'))
async def sector_delete_second(callback: CallbackQuery):
    sector_id = int(callback.data.split('_')[3])
    sector = await rq.get_sector_info(sector_id=sector_id)
    sector_name = sector.name
    await rq.delete_sector(sector=sector)
    await callback.message.edit_text(f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                                     f'–°–µ–∫—Ç–æ—Ä <b>{sector_name}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.',
                                     reply_markup=kb.strategy_sectors_back)


@router.callback_query(F.data.startswith('sector_change_percentage_'))
async def sector_change_percentage(callback: CallbackQuery, state: FSMContext):
    sector_id = int(callback.data.split('_')[3])
    await state.set_state(st.Sector.new_percentage)
    sector = await rq.get_sector_info(sector_id=sector_id)
    await state.update_data(sector_id=sector_id, name=sector.name)
    text = (f'üìä <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π %</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —Å–µ–∫—Ç–æ—Ä '
            f'<b>{sector.name}</b>.')
    await callback.message.edit_text(text)


@router.message(st.Sector.new_percentage)
async def sector_change_percentage_second(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input > 100:
            await message.answer('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–°–µ–∫—Ç–æ—Ä <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.')
            return
        else:
            await state.update_data(percentage=format_number(raw_input))

        data = await state.get_data()
        await rq.change_sector_percentage(sector_name=data['name'], percentage=data['percentage'])
        await message.answer(f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                             f'–°–µ–∫—Ç–æ—Ä <b>{data['name']}</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç '
                             f'<b>{data['percentage']}% –æ—Ç –†–∞–±–æ—á–µ–≥–æ –ö–∞–ø–∏—Ç–∞–ª–∞.</b>',
                             reply_markup=await kb.sector_change(data['sector_id']))
        await state.clear()

    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.strategy_sectors_back)
    except InvalidOperation:
        await message.answer('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\n'
                             '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>70%</code> –∏–ª–∏ <code>70.53%</code>')


@router.callback_query(F.data.startswith('strategy_tokens_'))
async def strategy_tokens(callback: CallbackQuery):
    sector_id = int(callback.data.split('_')[2])
    sector = await rq.get_sector_info(sector_id=sector_id)
    tokens = await rq.get_all_sector_tokens(sector_id=sector_id)
    token_text = ''
    if tokens:
        for token in tokens:
            token_text += f'üîπ {token.symbol} - {token.percentage}%\n'

    text = (f'<b>üìä –¢–æ–∫–µ–Ω—ã —Å–µ–∫—Ç–æ—Ä–∞ "{sector.name}"</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º:</b>\n'
            f'{token_text}\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ %:</b>')
    await callback.message.edit_text(
        text,
        reply_markup=await kb.strategy_tokens(sector_id=sector_id, page=0))


@router.callback_query(F.data.startswith('add_token_'))
async def add_token(callback: CallbackQuery, state: FSMContext):
    sector_id = int(callback.data.split('_')[2])
    await state.set_state(st.Token.sector_id)
    await state.update_data(sector_id=sector_id)
    await callback.message.edit_text(f'üó≥ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞</b>')


@router.message(st.Token.sector_id)
async def add_token_first(message: Message, state: FSMContext):
    await state.update_data(symbol=str(message.text))
    data = await state.get_data()
    sector = await rq.get_sector_info(sector_id=data['sector_id'])
    await state.set_state(st.Token.percentage)
    text = (f'üìä <b>–í–≤–µ–¥–∏—Ç–µ %</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω '
            f'<b>{data['symbol']}</b> –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞ <b>{sector.name}</b>.')
    await message.answer(text)


@router.message(st.Token.percentage)
async def add_token_second(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input > 100:
            await message.answer('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–¢–æ–∫–µ–Ω <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.')
            return
        else:
            await state.update_data(percentage=format_number(raw_input))

        data = await state.get_data()
        await rq.add_token(
            sector_id=data['sector_id'],
            symbol=data['symbol'],
            percentage=data['percentage']
            )
        sector = await rq.get_sector_info(sector_id=data['sector_id'])

        await message.answer(f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                             f'–¢–æ–∫–µ–Ω <b>{data['symbol']}</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç '
                             f'<b>{data['percentage']}%</b> –æ—Ç —Å–µ–∫—Ç–æ—Ä–∞ <b>{sector.name}</b>',
                             reply_markup=await kb.strategy_tokens_back(data['sector_id']))
        await state.clear()
    except ValueError as e:
        data = await state.get_data()
        await state.clear()
        await message.answer(
            f'{e}', reply_markup=await kb.strategy_tokens_back(data['sector_id'])
        )
    except InvalidOperation:
        await message.answer('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n\n'
                             '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>70%</code> –∏–ª–∏ <code>70.53%</code>')

@router.callback_query(F.data.startswith('token_page_'))
async def token_page(callback: CallbackQuery):
    sector_id = int(callback.data.split('_')[2])
    page = int(callback.data.split('_')[3])
    sector = await rq.get_sector_info(sector_id=sector_id)
    tokens = await rq.get_all_sector_tokens(sector_id=sector_id)
    token_text = ''
    if tokens:
        for token in tokens:
            token_text += f'üîπ {token.symbol} - {token.percentage}%\n'
    text = (f'<b>üìä –¢–æ–∫–µ–Ω—ã —Å–µ–∫—Ç–æ—Ä–∞ "{sector.name}"</b>\n\n'
            f'<b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º:</b>\n'
            f'{token_text}\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ %:</b>')
    await callback.message.edit_text(
        text,
        reply_markup=await kb.strategy_tokens(sector_id=sector_id, page=page))


@router.callback_query(F.data.startswith('token_button_'))
async def token_button(callback: CallbackQuery):
    token_id = int(callback.data.split('_')[2])
    token = await rq.get_token_or_info(token_id=token_id)
    if token:
        text = (
            f'<b>üìä –¢–æ–∫–µ–Ω "{token.symbol}" –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞ "{token.sector.name}"</b>\n\n'
            f'<b>–í—ã–¥–µ–ª–µ–Ω–æ % –æ—Ç —Å–µ–∫—Ç–æ—Ä–∞:</b> {token.percentage}%\n\n'
            f'<b>–í—ã–¥–µ–ª–µ–Ω–æ –Ω–∞ —Ç–æ–∫–µ–Ω:</b> {token.balance_usd}$\n'
            f'<b>–í—ã–¥–µ–ª–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä:</b> {token.balance_entry_usd}$\n\n'
            f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º:</b>'
        )
        await callback.message.edit_text(text,
                                         reply_markup=await kb.in_token(token_id))


@router.callback_query(F.data.startswith('token_change_percentage_'))
async def token_change_percentage_first(callback: CallbackQuery, state: FSMContext):
    token_id = int(callback.data.split('_')[3])
    await state.set_state(st.Token.new_percentage)
    token = await rq.get_token_or_info(token_id=token_id)
    if token:
        await state.update_data(symbol=token.symbol)
        await state.update_data(token_id=token_id, sector_id=token.sector_id)
        text = (f'üìä <b>–í–≤–µ–¥–∏—Ç–µ %</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω '
                f'<b>{token.symbol}</b> –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞ <b>{token.sector.name}</b>')
        await callback.message.edit_text(text)


@router.message(st.Token.new_percentage)
async def token_change_percentage_second(message: Message, state: FSMContext):
    try:
        raw_input = Decimal(message.text.replace('%', '').strip())
        if raw_input > 100:
            await message.answer('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n\n–¢–æ–∫–µ–Ω <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100%</u>.')
            return
        else:
            await state.update_data(new_percentage=format_number(raw_input))
        data = await state.get_data()
        sector = await rq.get_sector_info(sector_id=data['sector_id'])
        await rq.change_token_percentage(token_id=data['token_id'], sector_id=data['sector_id'],
                                         percentage=data['new_percentage'])
        await message.answer(f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                             f'–¢–æ–∫–µ–Ω <b>{data['symbol']}</b> —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç '
                             f'<b>{data['new_percentage']}%</b> –æ—Ç —Å–µ–∫—Ç–æ—Ä–∞ <b>{sector.name}</b>',
                             reply_markup=await kb.strategy_tokens_back(data['sector_id']))
        await state.clear()
    except ValueError as e:
        data = await state.get_data()
        await state.clear()
        await message.answer(
            f'{e}',
            reply_markup=await kb.strategy_tokens_back(data['sector_id']))
    except InvalidOperation:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç.\n\n'
                '<b>–ü—Ä–∏–º–µ—Ä:</b> <code>70%</code> –∏–ª–∏ <code>70.53%</code>')
        await message.answer(text)


@router.callback_query(F.data.startswith('token_delete_button_'))
async def token_delete_first(callback: CallbackQuery):
    token_id = int(callback.data.split('_')[3])
    token = await rq.get_token_or_info(token_id=token_id)
    text = f'<b>–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ç–æ—Ä {token.symbol}?</b>'
    await callback.message.edit_text(text, reply_markup=await kb.token_delete_confirm(token_id))


@router.callback_query(F.data.startswith('token_delete_confirm_'))
async def token_delete_second(callback: CallbackQuery):
    token_id = int(callback.data.split('_')[3])
    token = await rq.get_token_or_info(token_id=token_id)
    if token:
        token_symbol = token.symbol
        await rq.delete_token(token=token)
        text = (f'‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n'
                f'–¢–æ–∫–µ–Ω <b>{token_symbol}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
        await callback.message.edit_text(
            text,
            reply_markup=await kb.strategy_tokens_back(token.sector_id)
            )


@router.callback_query(F.data == 'positions')
async def positions(callback: CallbackQuery):
    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
                                     reply_markup=await kb.positions(page=0))

@router.callback_query(F.data == 'back_positions')
async def back_positions(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await positions(callback)


@router.callback_query(F.data == 'add_order')
async def add_order(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞:</b>',
                                     reply_markup=kb.add_order)


@router.callback_query(F.data == 'buy_order')
async def buy_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.Order.buy_token_symbol)
    await callback.message.edit_text('‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:</b>')


@router.message(st.Order.buy_token_symbol)
async def buy_order_first(message: Message, state: FSMContext):
    token_symbol = str(message.text)
    token = await rq.get_token_or_info(symbol=token_symbol)
    if token:
        await state.update_data(buy_token_symbol=token_symbol, buy_token_id=token.id)
        token_balance_entry_usd = token.balance_entry_usd
        liquidity_balance = await rq.get_direction_or_info(
            direction_name="–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", field="balance_usd"
        ) * Decimal("0.02")

        if token.position and token_balance_entry_usd < Decimal("5"):
            total_usd = token_balance_entry_usd + liquidity_balance
            text = (
                f'‚öñÔ∏è <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ "{token_symbol}" –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n'
                f"–ò–∑ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:</b> {format_number(token_balance_entry_usd)}$\n"
                f"<b>–ò–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:</b> {format_number(liquidity_balance)}$\n\n"
                f"üìä <b>–°—É–º–º–∞—Ä–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Ö–æ–¥ –¥–æ:</b> {format_number(total_usd)}$\n\n"
                f"‚ùì<i>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö <b>—ç—Ç–æ–π —Å—É–º–º—ã</b> –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–∞ –∫–æ—à–µ–ª–µ–∫."
                f"</i>\n\n"
                f"<b>–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:</b>"
            )
        else:
            text = (
                f'‚öñÔ∏è <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ "{token_symbol}" –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n\n'
                f"–ò–∑ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:<b> {format_number(token_balance_entry_usd)}$</b>\n\n"
                f"‚ùì <i>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã <b>–Ω–∞ —ç—Ç—É —Å—É–º–º—É</b> –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–∞ –∫–æ—à–µ–ª–µ–∫.</i>\n\n"
                f"<b>–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:</b>"
            )

        await message.answer(text)
        await state.set_state(st.Order.buy_amount)
    else:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n'
                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ç–æ—Ä.')
        await message.answer(text,
                             reply_markup=kb.order_error_with_token)
        await state.clear()
        return


@router.message(st.Order.buy_amount)
async def buy_order_second(message: Message, state: FSMContext):
    try:
        buy_amount = Decimal(message.text)
        await state.update_data(buy_amount=buy_amount)
        await state.set_state(st.Order.buy_entry_price)
        text = 'üí∞<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:</b>'
        await message.answer(text)
    except InvalidOperation:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞.\n\n'
                '<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> <code>70112</code> –∏–ª–∏ <code>70112.151423424</code>\n\n')
        await message.answer(text,
                             reply_markup=kb.order_cancel)


@router.message(st.Order.buy_entry_price)
async def buy_order_third(message: Message, state: FSMContext):
    try:
        buy_entry_price = Decimal(message.text)
        await state.update_data(buy_entry_price=buy_entry_price)
        data = await state.get_data()
        await rq.buy_order(token_id=data['buy_token_id'], amount=data['buy_amount'],
                           entry_price=data['buy_entry_price'])
        await state.clear()
        text = '‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n–û—Ä–¥–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'
        await message.answer(text,
                             reply_markup=kb.order_back)
    except InvalidOperation:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞.\n\n'
                '<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> <code>70112</code> –∏–ª–∏ <code>70112.151423424</code>\n\n')
        await message.answer(text,
                             reply_markup=kb.order_cancel)
    except ValueError as e:
        await state.clear()
        await message.answer(f'{e}', reply_markup=kb.order_back)


@router.callback_query(F.data == 'sell_order')
async def sell_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.Order.sell_token_symbol)
    text = '‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:</b>'
    await callback.message.edit_text(text)


@router.message(st.Order.sell_token_symbol)
async def sell_order_first(message: Message, state: FSMContext):
    token_symbol = str(message.text)
    token = await rq.get_token_or_info(symbol=token_symbol)
    if not token:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n'
                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–∫—Ç–æ—Ä.')
        await message.answer(text,
            reply_markup=kb.order_error_with_token)
        await state.clear()
        return
    await state.update_data(sell_token_symbol=token_symbol, sell_token_id=token.id)
    if not token.position:
        text = '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø–æ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É.'
        await message.answer(
            text,
            reply_markup=kb.order_back)
        await state.clear()
        return
    text = (f'‚öñÔ∏è–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{token.position.amount} {token_symbol}</b>\n\n'
            f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å:')
    await message.answer(text)
    await state.set_state(st.Order.sell_amount)


@router.message(st.Order.sell_amount)
async def sell_order_second(message: Message, state: FSMContext):
    try:
        sell_amount = Decimal(message.text)
        await state.update_data(sell_amount=sell_amount)
        data = await state.get_data()
        await rq.sell_order(token_id=data['sell_token_id'], amount=data['sell_amount'])
        await state.clear()
        text = '‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n–û—Ä–¥–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'
        await message.answer(text,
                             reply_markup=kb.order_back)
    except InvalidOperation:
        text = ('‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞.\n\n'
                '<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:</b> <code>70112</code> –∏–ª–∏ <code>70112.151423424</code>\n\n')
        await message.answer(text,
                             reply_markup=kb.order_cancel)


@router.callback_query(F.data.startswith('position_button_'))
async def token_button(callback: CallbackQuery):
    position_id = int(callback.data.split('_')[2])
    position = await rq.get_position_info(position_id=position_id)
    if position:
        text = (
            f'<b>üìä –ü–æ–∑–∏—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É "{position.name}"</b>\n\n'
            f'üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b> {format_number(position.invested_usd)}$\n\n'
            f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {format_number(position.amount)}\n\n'
            f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞:</b> {position.token.current_coinprice_usd or 0}$\n\n'
            f'<b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {format_number(position.entry_price)}$\n'
            f'<b>–¶–µ–Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞ (—Ö2):</b> {format_number(position.bodyfix_price_usd)}$\n\n'
            f'üìà <b>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏:</b> {format_number(position.total_usd)}$'
        )
        await callback.message.edit_text(text, reply_markup=await kb.in_position(position_id))


@router.callback_query(F.data.startswith('position_buy_order_'))
async def position_buy_order(callback: CallbackQuery, state: FSMContext):
    position_id = int(callback.data.split('_')[3])
    position = await rq.get_position_info(position_id=position_id)
    token_symbol = position.token.symbol
    token_id = position.token_id
    await state.update_data(buy_token_symbol=token_symbol, buy_token_id=token_id)
    await state.set_state(st.Order.buy_amount)
    token_balance_entry_usd = position.token.balance_entry_usd
    liquidity_balance = await rq.get_direction_or_info(
        direction_name="–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", field="balance_usd"
    ) * Decimal("0.02")
    
    if token_balance_entry_usd < Decimal("5"):
        total_usd = token_balance_entry_usd + liquidity_balance
        text = (
            f'‚öñÔ∏è <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ "{token_symbol}" –¥–æ—Å—Ç—É–ø–Ω–æ:\n\n'
            f"–ò–∑ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:</b> {format_number(token_balance_entry_usd)}$\n"
            f"<b>–ò–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:</b> {format_number(liquidity_balance)}$\n\n"
            f"üìä <b>–°—É–º–º–∞—Ä–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Ö–æ–¥ –¥–æ:</b> {format_number(total_usd)}$\n\n"
            f"‚ùì<i>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö <b>—ç—Ç–æ–π —Å—É–º–º—ã</b> –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–∞ –∫–æ—à–µ–ª–µ–∫."
            f"</i>\n\n"
            f"<b>–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:</b>"
        )
    else:
        text = (
            f'‚öñÔ∏è <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ "{token_symbol}" –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n\n'
            f"–ò–∑ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:<b> {format_number(token_balance_entry_usd)}$</b>\n\n"
            f"‚ùì <i>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã <b>–Ω–∞ —ç—Ç—É —Å—É–º–º—É</b> –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –Ω–∞ –∫–æ—à–µ–ª–µ–∫.</i>\n\n"
            f"<b>–í–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ:</b>"
        )
    await callback.message.edit_text(text)


@router.callback_query(F.data.startswith('position_sell_order_'))
async def position_sell_order(callback: CallbackQuery, state: FSMContext):
    position_id = int(callback.data.split('_')[3])
    position = await rq.get_position_info(position_id=position_id)
    token_symbol = position.token.symbol
    token_id = position.token_id
    await state.set_state(st.Order.sell_amount)
    await state.update_data(sell_token_symbol=token_symbol, sell_token_id=token_id)
    text = (
        f"‚öñÔ∏è–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{position.amount} {token_symbol}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å:</b>"
    )
    await callback.message.edit_text(text)
