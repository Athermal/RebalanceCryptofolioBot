import asyncio
import logging
import os
from typing import Optional

import aiohttp
import certifi
import ssl
from dotenv import load_dotenv
from decimal import Decimal

from database.requests import get_all_positions, update_tokens_prices
from utils.common import symbols_list

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logger = logging.getLogger(__name__)


class BybitTickersParser:
    """–ö–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ symbols_list —Å Bybit"""

    def __init__(self, bot: Optional[object] = None):
        self.semaphore = asyncio.Semaphore(15)
        self.bybit_url = "https://api.bybit.com/"
        self.category = "spot"
        self.bot = bot
        self.is_running = False
        self.session: Optional[aiohttp.ClientSession] = None
        self.tasks: list[asyncio.Task] = []
        self.sleep_task: Optional[asyncio.Task] = None

    async def init_tokens(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        positions = await get_all_positions()
        symbols_list.extend(
            position.token.symbol 
            for position in positions 
            if position.token and position.token.symbol not in symbols_list
        )

    async def check_api_health(self, session: aiohttp.ClientSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Bybit."""
        url = f"{self.bybit_url}/v5/market/time"
        try:
            async with session.get(url) as response:
                data = await response.json()
                return data["retCode"] == 0
        except Exception:
            return False

    async def fetch_tickers_bybit(
        self, session: aiohttp.ClientSession, symbol: str
    ) -> tuple[str, Decimal] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        url = f"{self.bybit_url}/v5/market/tickers?category={self.category}&symbol={symbol}USDT"
        async with self.semaphore:
            try:
                async with session.get(url) as response:
                    data = await response.json()
                    if data["retCode"] == 0:
                        price = Decimal(data["result"]["list"][0]["lastPrice"])
                        logger.info(f"–¶–µ–Ω–∞ –¥–ª—è {symbol}: {price}")
                        return symbol, price
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: {data['retMsg']}")
                        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if data.get("retMsg") == "invalid symbol" or data.get("retCode") == 10001:
                            if symbol in symbols_list:
                                symbols_list.remove(symbol)
                                if self.bot:
                                    await self.bot.send_message(
                                        chat_id=ADMIN_ID,
                                        text=(f"‚ùóÔ∏è –¢–æ–∫–µ–Ω <b>{symbol}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ Bybit, "
                                              f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –µ–≥–æ —Ü–µ–Ω–µ <b>–Ω–µ –±—É–¥–µ—Ç</b>."),
                                        parse_mode="HTML",
                                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {symbol}: {e}")

    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.is_running = True
        await self.init_tokens()

        ssl_context = ssl.create_default_context(cafile=certifi.where())
        self.session = aiohttp.ClientSession(
            connector=aiohttp.TCPConnector(ssl=ssl_context),
            timeout=aiohttp.ClientTimeout(total=60),
        )
        try:
            while self.is_running:
                if await self.check_api_health(session=self.session) and symbols_list:
                    self.tasks = [
                        asyncio.create_task(
                            self.fetch_tickers_bybit(self.session, symbol)
                        )
                        for symbol in symbols_list
                    ]
                    results = await asyncio.gather(*self.tasks)
                    prices = {}
                    for result in results:
                        if result:
                            symbol, price = result
                            prices[symbol] = price
                    if prices:
                        await update_tokens_prices(prices)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —Ü–µ–Ω—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
                        for symbol, price in prices.items():
                            token = await get_token_or_info(symbol=symbol)
                            if token and token.position and token.position.bodyfix_price_usd:
                                if price >= token.position.bodyfix_price_usd:
                                    if self.bot:
                                        await self.bot.send_message(
                                            chat_id=ADMIN_ID,
                                            text=(f"üéØ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ <b>{symbol}</b> –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–Ω—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞: "
                                                  f"<b>{price}$</b>"),
                                            parse_mode="HTML",
                                        )
                    self.tasks = []
                elif not symbols_list:
                    logger.warning("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç.")
                else:
                    logger.error("API Bybit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

                self.sleep_task = asyncio.create_task(asyncio.sleep(60))
                try:
                    await self.sleep_task
                except asyncio.CancelledError:
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
        finally:
            if self.session:
                await self.session.close()
                self.session = None
            logger.info("–ü–∞—Ä—Å–µ—Ä Bybit –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.is_running = False
        for task in self.tasks:
            task.cancel()
        if self.sleep_task:
            self.sleep_task.cancel()
