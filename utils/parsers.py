import asyncio
import logging
import os
from typing import Optional

import aiohttp
import certifi
import ssl
from dotenv import load_dotenv
from decimal import Decimal

from database.requests import get_all_positions, update_tokens_prices, get_token_or_info
from utils.common import symbols_list, bodyfix_notified_tokens, drawdown_last_prices
import bot.keyboards as kb

load_dotenv()
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DRAWDOWN_PERCENTAGE = int(os.getenv("DRAWDOWN_PERCENTAGE"))

logger = logging.getLogger(__name__)

class BybitTickersParser:
    """–ö–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ symbols_list —Å Bybit"""

    def __init__(self, bot: Optional[object] = None):
        self.semaphore = asyncio.Semaphore(15)
        self.bybit_url = "https://api.bybit.com/"
        self.category = "spot"
        self.bot = bot
        self.is_running = False
        self.session: Optional[aiohttp.ClientSession] = None
        self.tasks: list[asyncio.Task] = []
        self.sleep_task: Optional[asyncio.Task] = None

    async def init_tokens(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        positions = await get_all_positions()
        if positions:
            symbols_list.extend(
                position.token.symbol 
                for position in positions 
                if position.token and position.token.symbol not in symbols_list
            )
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(symbols_list)} —Ç–æ–∫–µ–Ω–æ–≤")

    async def check_api_health(self, session: aiohttp.ClientSession) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Bybit."""
        url = f"{self.bybit_url}/v5/market/time"
        try:
            async with session.get(url) as response:
                data = await response.json()
                return data["retCode"] == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API Bybit: {e}")
            return False

    async def fetch_tickers_bybit(
        self, session: aiohttp.ClientSession, symbol: str
    ) -> tuple[str, Decimal] | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        url = f"{self.bybit_url}/v5/market/tickers?category={self.category}&symbol={symbol}USDT"
        async with self.semaphore:
            try:
                async with session.get(url) as response:
                    data = await response.json()
                    if data["retCode"] == 0:
                        price = Decimal(data["result"]["list"][0]["lastPrice"])
                        return symbol, price
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è {symbol}: {data['retMsg']}")
                        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if data.get("retMsg") == "invalid symbol" or data.get("retCode") == 10001:
                            if symbol in symbols_list:
                                symbols_list.remove(symbol)
                                if self.bot:
                                    await self.bot.send_message(
                                        chat_id=ADMIN_ID,
                                        text=(f"‚ùóÔ∏è –¢–æ–∫–µ–Ω <b>{symbol}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ Bybit, "
                                              f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –µ–≥–æ —Ü–µ–Ω–µ <b>–Ω–µ –±—É–¥–µ—Ç</b>.")
                                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {symbol}: {e}")

    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.is_running = True
        await self.init_tokens()
        ssl_context = ssl.create_default_context(cafile=certifi.where())
        self.session = aiohttp.ClientSession(
            connector=aiohttp.TCPConnector(ssl=ssl_context),
            timeout=aiohttp.ClientTimeout(total=60),
        )
        try:
            while self.is_running:
                api_healthy = await self.check_api_health(session=self.session)

                if api_healthy and symbols_list:
                    self.tasks = [
                        asyncio.create_task(
                            self.fetch_tickers_bybit(self.session, symbol)
                        )
                        for symbol in symbols_list
                    ]
                    results = await asyncio.gather(*self.tasks)
                    prices = {}
                    for result in results:
                        if result:
                            symbol, price = result
                            prices[symbol] = price
                    if prices:
                        await update_tokens_prices(prices)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ —Ü–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ —Ü–µ–Ω—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
                        symbols = list(prices.keys())
                        tokens = await get_token_or_info(symbols=symbols)

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞
                        bodyfix_tokens = [
                            (token, prices.get(token.symbol))
                            for token in tokens
                            if (token.position and 
                                prices.get(token.symbol, 0) >= token.position.bodyfix_price_usd and
                                token.symbol not in bodyfix_notified_tokens)  
                        ]

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å–∞–¥–∫–µ
                        drawdown_tokens = []
                        for token in tokens:
                            if not token.position:
                                continue
                                
                            symbol = token.symbol
                            price = prices.get(symbol, 0)
                            entry_price = token.position.entry_price
                            if price >= entry_price:
                                continue
                            drawdown_percent = ((entry_price - price) / entry_price) * 100
                            if drawdown_percent < DRAWDOWN_PERCENTAGE:
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            last_notified_price = drawdown_last_prices.get(symbol)
                            
                            # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å–∞–¥–∫–µ (—Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å)
                            if last_notified_price is None:
                                drawdown_tokens.append((token, price))
                                continue
                                
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            additional_drawdown = ((last_notified_price - price) / last_notified_price) * 100
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ
                            if additional_drawdown >= DRAWDOWN_PERCENTAGE:
                                drawdown_tokens.append((token, price))
                                
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞
                        for token, price in bodyfix_tokens:
                            if self.bot:
                                await self.bot.send_message(
                                    chat_id=ADMIN_ID,
                                    text=(
                                        f"üéØ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token.symbol}</b> "
                                        f"–¥–æ—Å—Ç–∏–≥–ª–∞ <b>—Ü–µ–Ω—ã —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–µ–ª–∞!</b>"
                                    ),
                                    reply_markup=await kb.to_position_button(
                                        token.position.id
                                    ),
                                )
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö
                                bodyfix_notified_tokens.add(token.symbol)
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É {token.symbol}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å–∞–¥–∫–µ
                        for token, price in drawdown_tokens:
                            if self.bot:
                                drawdown_percent = ((token.position.entry_price - price) / token.position.entry_price) * 100
                                await self.bot.send_message(
                                    chat_id=ADMIN_ID,
                                    text=(
                                        f"üìâ <b>–ü—Ä–æ—Å–∞–¥–∫–∞ –ø–æ {token.symbol}!</b>\n\n"
                                        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${price}</b>\n"
                                        f"–ü—Ä–æ—Å–∞–¥–∫–∞: <b><i>-{drawdown_percent:.2f}%</i></b>"
                                    ),
                                    reply_markup=await kb.to_position_button(
                                        token.position.id
                                    ),
                                )
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤ —Å–ª–æ–≤–∞—Ä–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–∞–¥–∫–∏
                                drawdown_last_prices[token.symbol] = price
                                logger.info(
                                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å–∞–¥–∫–µ {drawdown_percent}% "
                                    f"–ø–æ —Ç–æ–∫–µ–Ω—É {token.symbol}"
                                )
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
                    self.tasks = []
                elif not symbols_list:
                    logger.warning("–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç.")
                else:
                    logger.error("API Bybit –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

                logger.info("–ü–∞—Ä—Å–µ—Ä —É—Ö–æ–¥–∏—Ç –≤ —Å–æ–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥")
                self.sleep_task = asyncio.create_task(asyncio.sleep(60))
                try:
                    await self.sleep_task
                except asyncio.CancelledError:
                    break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
        finally:
            if self.session:
                await self.session.close()
                self.session = None
            logger.info("–ü–∞—Ä—Å–µ—Ä Bybit –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.is_running = False
        for task in self.tasks:
            task.cancel()
        if self.sleep_task:
            self.sleep_task.cancel()
